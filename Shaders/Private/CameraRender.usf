#include "/Engine/Private/Common.ush"
#include "/Engine/Private/ColorUtils.ush"

// float4x4 Projection;
Texture2D BackTexture;
float2 UVScale;
uint OutWidth;
uint SRGBToLinear;

SamplerState BaseSampler;
SamplerState BaseSamplerUV;

// VERTEX SHADER

void MainVS(
	float4 InPosition : ATTRIBUTE0,
	float2 InUV : ATTRIBUTE1,
	out float2 OutUV : TEXCOORD0,
	out float4 OutPosition : SV_POSITION
	)
{
	OutPosition = InPosition;
	OutUV = InUV;
}

// PIXEL SHADER

void MainPS(
	in float2 uv : TEXCOORD0,
	out float4 OutColor : SV_Target0
	)
{
	float2 ScaledUV = uv * UVScale;

	float3 YUV;

	YUV.x = BackTexture.Sample(BaseSampler, ScaledUV).x;

	ScaledUV.y *= 0.5f;
	ScaledUV.y += 2.0f / 3.0f;

	uint UVOffs = uint(uv.x * OutWidth / 2.0f) * 2;
	float UPos = (float(UVOffs * UVScale.x) + 0.5f) / OutWidth;
	float VPos = (float(UVOffs * UVScale.x) + 1.5f) / OutWidth;

	YUV.y = BackTexture.Sample(BaseSamplerUV, float2(UPos, ScaledUV.y)).x;
	YUV.z = BackTexture.Sample(BaseSamplerUV, float2(VPos, ScaledUV.y)).x;

	float4x4 ConvertMatrix = float4x4(
		1.164383f,  0.000000f,  1.596027f, 0.06274509803921568627f,
		1.164383f, -0.391762f, -0.812968f, 0.5019607843137254902f,
		1.164383f,  2.017232f,  0.000000f, 0.5019607843137254902f,
		0.000000f,  0.000000f,  0.000000f, 1.000000f
	);
	
	OutColor = float4(YuvToRgb(YUV, ConvertMatrix, SRGBToLinear).zyx, 1.0f);
}